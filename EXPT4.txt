# DFS algorithm function using recursion
def dfs(graph, current_node, goal_node, visited, path):
    # Mark the current node as visited and add it to the path
    visited.add(current_node)
    path.append(current_node)
    
    # Check if the current node is the goal node
    if current_node == goal_node:
        return path
    
    # Explore all adjacent nodes (neighbors)
    for neighbor in graph[current_node]:
        if neighbor not in visited:
            result = dfs(graph, neighbor, goal_node, visited, path)
            if result:  # If a successful path is found, return it
                return result
    
    # Backtrack if the goal is not found on this path
    path.pop()
    return None

# Function to take graph input from the user
def input_graph():
    graph = {}
    num_edges = int(input("Enter the number of edges in the graph: "))
    
    for _ in range(num_edges):
        node, neighbor = input("Enter edge (node neighbor): ").split()
        if node not in graph:
            graph[node] = []
        if neighbor not in graph:
            graph[neighbor] = []
        graph[node].append(neighbor)
        graph[neighbor].append(node)
    
    return graph

# Input graph, start, and goal nodes
graph = input_graph()
start_node = input("Enter the start node: ")
goal_node = input("Enter the goal node: ")

# Perform DFS and display the path
visited = set()
path = []

result_path = dfs(graph, start_node, goal_node, visited, path)

if result_path:
    print("DFS Path from start to goal:", " -> ".join(result_path))
else:
    print("No path found from start to goal.")
